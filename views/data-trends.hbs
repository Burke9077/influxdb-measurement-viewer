<div class="row">
	<div class="col-lg-12 col-xl-8"> <!--Paramater comparison aka the chart box-->
		<div class="ibox ">
			<div class="ibox-title">
				<h5>Trend Data</h5>
				<div class="ibox-tools">
					<a class="collapse-link">
						<i class="fa fa-chevron-up"></i>
					</a>
					<a class="close-link">
						<i class="fa fa-times"></i>
					</a>
				</div>
			</div>
			<div class="ibox-content vh-80">
				<div>
					<canvas id="lineChart" height="140"></canvas>
				</div>
				<script src="/js/data-trends.js"></script>
			</div>
		</div>
	</div>

	<div class="col-lg-12 col-xl-4"> <!--Right hand section for selecting and adjusting params -->
		<div class="col-md-12 col-lg-6 col-xl-12"> <!-- Add/remove parameters -->
			<div class="ibox ">
				<div class="ibox-title">
					<h5>Variable Groups</h5>
					<div class="ibox-tools">
						<a class="collapse-link">
							<i class="fa fa-chevron-up"></i>
						</a>
						<a class="close-link">
							<i class="fa fa-times"></i>
						</a>
					</div>
				</div>
				<div class="ibox-content">
					<div class="row">
						<div class="col-sm-12">
							<select id="variableGroupSelector" class="form-control" size="3" disabled>
								{{#chartconfig.variablegroups}}
								<option id="{{this.name}}" {{#if this.isSelected}}selected{{/if}}>{{this.name}}</option>
								{{/chartconfig.variablegroups}}
							</select>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="col-md-12 col-lg-6 col-xl-12"> <!-- Change Time Range -->
			<div class="ibox ">
				<div class="ibox-title">
					<h5>Change Search Time Range</h5>
					<div class="ibox-tools">
						<a class="collapse-link">
							<i class="fa fa-chevron-up"></i>
						</a>
						<a class="close-link">
							<i class="fa fa-times"></i>
						</a>
					</div>
				</div>
				<div class="ibox-content">
					<div class="row">
						<div class="col-sm-12">
							<select id="timeRangeSelector" class="form-control">
								<option value="custom">Custom Date/Time Range</option>
								<optgroup label="Relative Time Range">
									<option value="-15s">Last 15 Seconds</option>
									<option value="-60s">Last 60 Seconds</option>
									<option value="-5m">Last 5 Minutes</option>
									<option value="-10m">Last 10 Minutes</option>
									<option value="-15m">Last 15 Minutes</option>
									<option value="-30m">Last 30 Minutes</option>
									<option value="-1h">Last 1 Hour</option>
								</optgroup>
							</select>
						</div>
					</div>
					<div class="row">
						<div id="customDateTimeContainer" style="display:none;">
							<!-- This section will only be shown if the user selects a custom time & date range -->
							<div class="form-group col-sm-12" style="margin-top: 1.0em;">
								<label class="font-normal">Start Date</label>
								<div class="input-group">
									<span class="input-group-addon"><i class="fa fa-calendar"></i></span>
									<input id="startDate" type="text" class="form-control date-picker" value="{{defaultSearchRange.threeDaysAgo}}" onchange="requestUpdatedChart();">
								</div>
							</div>
							<div class="form-group col-sm-12">
								<label class="font-normal">Start time</label>
								<div class="input-group clockpicker" data-autoclose="true">
									<span class="input-group-addon"><span class="fa fa-clock-o"></span></span>
									<input id="startTime" type="text" class="form-control" value="00:00" onchange="requestUpdatedChart();">
								</div>
							</div>
							<div class="col-sm-12">
								<p>to</p>
							</div>
							<div class="form-group col-sm-12">
								<label class="font-normal">End Date</label>
								<div class="input-group">
									<input id="endDate" type="text" class="form-control date-picker" value="{{defaultSearchRange.currentDate}}" onchange="requestUpdatedChart();">
									<span class="input-group-addon"><i class="fa fa-calendar"></i></span>
								</div>
							</div>
							<div class="form-group col-sm-12">
								<label class="font-normal">End Time</label>
								<div class="input-group clockpicker" data-autoclose="true">
									<input id="endTime" type="text" class="form-control" value="00:00" onchange="requestUpdatedChart();">
									<span class="input-group-addon"><span class="fa fa-clock-o"></span></span>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="col-md-12 col-lg-6 col-xl-12"> <!-- Select and Adjust Parameters -->
			<div class="ibox ">
				<div class="ibox-title">
					<h5>Selected Group</h5>
					<div class="ibox-tools">
						<a class="collapse-link">
							<i class="fa fa-chevron-up"></i>
						</a>
						<a class="close-link">
							<i class="fa fa-times"></i>
						</a>
					</div>
				</div>
				<div class="ibox-content">
					<table id="SelectedGroupTable" class="table table-hover">
						<thead>
							<tr>
								<th>Display</th>
								<th>Variable Name</th>
								<th>Live Value</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<!-- Rows will be added dynamically here -->
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	// Initialize socket.io
	const socket = io();
	let chartConfig = null;

	// Function to be called when the chart needs to be updated
	function requestUpdatedChart() {
		let currentSelectedVariableGroup = $("#variableGroupSelector").val();
		let currentSelectedSearchType = $("#timeRangeSelector").val();
		let updatedSearch = {
			variableGroup: currentSelectedVariableGroup,
			searchType: currentSelectedSearchType
		};
		// If the user has selected a custom search, request a historical chart
		if (currentSelectedSearchType === "custom") {
			updatedSearch.startDate = $("#startDate").val();
			updatedSearch.startTime = $("#startTime").val();
			updatedSearch.endDate = $("#endDate").val();
			updatedSearch.endTime = $("#endTime").val();
			socket.emit('historical-chart', updatedSearch);
		} else { // Otherwise, we will be asking for a relative (live) chart
			socket.emit('relative-chart', updatedSearch);
		}
	}

	// Function to toggle the display of custom date/time
	function toggleCustomDateTimeDisplay() {
		var customDateTimeContainer = document.getElementById('customDateTimeContainer');
		var timeRangeSelector = document.getElementById('timeRangeSelector');
		customDateTimeContainer.style.display = timeRangeSelector.value === 'custom' ? 'block' : 'none';
	}

	function updateTable(variableGroup, chartConfig) {
		console.log('Inside updateTable', { variableGroup, chartConfig });

		// Clear existing table rows
		const tableBody = document.querySelector('#SelectedGroupTable tbody');
		tableBody.innerHTML = '';

		// Add a row for each variable in the group
    	variableGroup.forEach(variable => {
			// Fetch live value from the database (you'll need to implement this part)
			//const liveValue = fetchLiveValueForVariable(variable); // Placeholder function

			// Create a new row
			const row = tableBody.insertRow();
			row.insertCell(0).innerHTML = '<input type="checkbox">'; // Checkbox
			row.insertCell(1).textContent = variable; // Variable name
			row.insertCell(2).textContent = 0; // Live value (placeholder)
    });
	}
	
	// When the selection changes 
	function onVariableGroupChange(chartConfig) {
		console.log('onVariableGroupChange called', chartConfig);
		let currentSelectedVariableGroup = $("#variableGroupSelector").val();
		const variables = getVariablesForGroup(currentSelectedVariableGroup, chartConfig);

		// Now 'variables' contains the array of variable names for the selected group
		updateTable(variables, chartConfig); // Pass this array to your table updating function
	}
	

	function getVariablesForGroup(selectedGroupName, chartConfig) {
		console.log(selectedGroupName)
		const group = chartConfig.variablegroups.find(group => group.name === selectedGroupName);
		return group ? group.variables : [];
	}

	// DOMContentLoaded event
	document.addEventListener('DOMContentLoaded', function() {
		// Initialize Select2
		$('#timeRangeSelector').select2({
			minimumResultsForSearch: Infinity // Hides the search box
		});

		// Add change event listener to the time range selector
		$('#timeRangeSelector').on('change', function() {
			toggleCustomDateTimeDisplay();
			requestUpdatedChart(); // Call the updateChart function as well
		});

		// Initially load the default group when page is loaded
		let initialSelectElement = document.querySelector('#variableGroupSelector');
		if (initialSelectElement) {
			requestUpdatedChart();
		}

		//Load Chart Config
		fetch('/api/chart-config')
			//console.log('Fetching chart config')
			.then(response => response.json())
			.then(data => {
				console.log('loading data')
				chartConfig = data;
				console.log('Fetched chartConfig:', data);
				console.log('enabling selector')
				document.getElementById('variableGroupSelector').disabled = false;
				console.log('updating table')
				const selectedGroup = selector.value; // Get the default or first group
            	const variables = getVariablesForGroup(selectedGroup, chartConfig);
				updateTable(variables, chartConfig);
				})
			.catch(error => console.error('Error fetching chart config:', error));

		//Listner for Variable group selector change
		const selector = document.getElementById('variableGroupSelector');
			if (selector) {
				selector.addEventListener('change', function() {
					if (chartConfig) {
						const selectedGroup = this.value; // Get the currently selected group
						const variables = getVariablesForGroup(selectedGroup, chartConfig);
						updateTable(variables, chartConfig); // Call updateTable with the correct parameters
						requestUpdatedChart(); // If this still needs to be called
					} else {
						console.error('Chart configuration data is not loaded yet');
					}
				});
			} else {
				console.error('Variable group selector not found');
			}


		// Call the function on initial load as well
		toggleCustomDateTimeDisplay();
	});

	$(document).ready(function(){
		// Setup date/time pickers
		$('.date-picker').datepicker({
			todayBtn: "linked",
			keyboardNavigation: true,
			forceParse: true,
			calendarWeeks: false,
			autoclose: true,
			format: "yyyy-mm-dd"
		});
		
		$('.clockpicker').clockpicker();
	});


	// Setup the chart!
	let parameterChart = {
		type: 'line',
		data: {
			datasets: [
				{ // One entry given per VariableName returned
					label: "24VDC Circuit A OK 1", // The variable name as the label
					yAxisID: 'y1', // Create a new "yAxisID" for each VariableName returned, increment as we go
					data: [{x: "2023-10-01T04:00:00Z", y: 28}, {x: "2023-10-03T04:00:00Z", y: 48}, {x: "2023-10-05T04:00:00Z", y: 40}] // Finally the data array will be an array of our returned results for a given variable with x as the timestamp (_time) and y as the _value
				},{
					label: "24VDC Circuit B OK 1",
					yAxisID: 'y2',
					data: [{x: "2023-10-01T04:00:00Z", y: 65}, {x: "2023-10-03T04:00:00Z", y: 80}, {x: "2023-10-05T04:00:00Z", y: 90}]
				}
			]
		},
		options: {
			responsive: true,
			scales: {
				y1: { // For now lets just make a y axis for each returned variable group we find, we'll tweak this more later
					type: 'linear',
					min: 0,
					max: 200,
					display: false,
				},
				y2: {
					type: 'linear',
					min: 0,
					max: 200,
					display: true,
				}
			}
		}
	};

	let ctx = document.getElementById("lineChart").getContext("2d");
	let chart = new Chart(ctx, parameterChart);

	// Add socket.io chart integration
	socket.on('historical-data', (chartData) => {
		//console.log(JSON.stringify(chartData, null, 4).substring(0,9999999));
		chart.data = chartData.data;
		chart.options = chartData.options;
		chart.update();
	});

	// Add socket.io chart integration for relative (live) data
	socket.on('relative-data', (chartData) => {
    	//console.log('Relative chart data:', JSON.stringify(chartData, null, 4).substring(0,9999999));
    	chart.data = chartData.data;
    	chart.options = chartData.options;
    	chart.update();
	});

</script>
